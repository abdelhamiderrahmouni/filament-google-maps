{
  "version": 3,
  "sources": ["../../../resources/js/filament-google-maps-entry.js"],
  "sourcesContent": ["export default function filamentGoogleMapsField({\n  state,\n  defaultLocation,\n  controls,\n  layers,\n  defaultZoom,\n  gmaps,\n  mapEl,\n  drawingField,\n  geoJson,\n  geoJsonField,\n  geoJsonProperty,\n  geoJsonVisible,\n}) {\n  return {\n    state,\n    map: null,\n    geocoder: null,\n    marker: null,\n    markerLocation: null,\n    layers: null,\n    symbols: {\n      \"%n\": [\"street_number\"],\n      \"%z\": [\"postal_code\"],\n      \"%S\": [\"street_address\", \"route\"],\n      \"%A1\": [\"administrative_area_level_1\"],\n      \"%A2\": [\"administrative_area_level_2\"],\n      \"%A3\": [\"administrative_area_level_3\"],\n      \"%A4\": [\"administrative_area_level_4\"],\n      \"%A5\": [\"administrative_area_level_5\"],\n      \"%a1\": [\"administrative_area_level_1\"],\n      \"%a2\": [\"administrative_area_level_2\"],\n      \"%a3\": [\"administrative_area_level_3\"],\n      \"%a4\": [\"administrative_area_level_4\"],\n      \"%a5\": [\"administrative_area_level_5\"],\n      \"%L\": [\"locality\", \"postal_town\"],\n      \"%D\": [\"sublocality\"],\n      \"%C\": [\"country\"],\n      \"%c\": [\"country\"],\n      \"%p\": [\"premise\"],\n      \"%P\": [\"premise\"],\n    },\n    drawingManager: null,\n    overlays: [],\n    dataLayer: null,\n    geoJsonDataLayer: null,\n\n    loadGMaps: function () {\n      if (\n        !document.getElementById(\"filament-google-maps-google-maps-entry-js\")\n      ) {\n        const script = document.createElement(\"script\");\n        script.id = \"filament-google-maps-google-maps-entry-js\";\n        window.filamentGoogleMapsAsyncLoad = this.createMap.bind(this);\n        script.src = gmaps + \"&callback=filamentGoogleMapsAsyncLoad\";\n        document.head.appendChild(script);\n      } else {\n        const waitForGlobal = function (key, callback) {\n          if (window[key]) {\n            callback();\n          } else {\n            setTimeout(function () {\n              waitForGlobal(key, callback);\n            }, 100);\n          }\n        };\n\n        waitForGlobal(\n          \"filamentGoogleMapsAPILoaded\",\n          function () {\n            this.createMap();\n          }.bind(this)\n        );\n      }\n    },\n\n    init: function () {\n      this.loadGMaps();\n    },\n\n    createMap: function () {\n      window.filamentGoogleMapsAPILoaded = true;\n\n      this.map = new google.maps.Map(mapEl, {\n        center: this.getCoordinates(),\n        zoom: defaultZoom,\n        ...controls,\n      });\n\n      this.marker = new google.maps.Marker({\n        map: this.map,\n      });\n\n      this.marker.setPosition(this.getCoordinates());\n\n      if (layers) {\n        this.layers = layers.map((layerUrl) => {\n          const kmlLayer = new google.maps.KmlLayer({\n            url: layerUrl,\n            map: this.map,\n          });\n\n          kmlLayer.addListener(\"click\", (kmlEvent) => {\n            const text = kmlEvent.featureData.description;\n          });\n        });\n      }\n\n      if (geoJson) {\n        if (geoJsonVisible) {\n          this.geoJsonDataLayer = this.map.data;\n        } else {\n          this.geoJsonDataLayer = new google.maps.Data();\n        }\n\n        if (/^http/.test(geoJson)) {\n          this.geoJsonDataLayer.loadGeoJson(geoJson);\n        } else {\n          this.geoJsonDataLayer.addGeoJson(JSON.parse(geoJson));\n        }\n      }\n\n      // if (drawingField) {\n      //   this.dataLayer = new google.maps.Data();\n      //\n      //   let geoJSON = getStateUsing(drawingField);\n      //   geoJSON && this.loadFeaturesCollection(JSON.parse(geoJSON));\n      //\n      //   google.maps.event.addListener(\n      //     this.drawingManager,\n      //     \"overlaycomplete\",\n      //     (event) => {\n      //       event.overlay.type = event.type;\n      //       event.overlay.id = this.guid();\n      //       event.overlay.feature = this.instanceFeature(event.overlay);\n      //       this.addOverlayEvents(event.overlay);\n      //       this.overlays.push(event.overlay);\n      //\n      //       if (event.type != google.maps.drawing.OverlayType.MARKER) {\n      //         // Switch back to non-drawing mode after drawing a shape.\n      //         this.drawingManager.setDrawingMode(null);\n      //         this.setSelection(event.overlay);\n      //       }\n      //\n      //       this.drawingModified();\n      //     }\n      //   );\n      // }\n    },\n\n    getCoordinates: function () {\n      if (this.state === null || !this.state.hasOwnProperty(\"lat\")) {\n        this.state = { lat: defaultLocation.lat, lng: defaultLocation.lng };\n      }\n      return this.state;\n    },\n\n    instanceOverlay: function (feature) {\n      var instance = null;\n      switch (feature.properties.type) {\n        case google.maps.drawing.OverlayType.MARKER:\n          instance = new google.maps.Marker({\n            id: feature.properties.id,\n            type: feature.properties.type,\n            position: new google.maps.LatLng(\n              feature.geometry.coordinates[1],\n              feature.geometry.coordinates[0]\n            ),\n            draggable: true,\n          });\n          break;\n        case google.maps.drawing.OverlayType.RECTANGLE:\n          var NE = new google.maps.LatLng(\n            feature.geometry.coordinates[0][2][1],\n            feature.geometry.coordinates[0][2][0]\n          );\n          var SW = new google.maps.LatLng(\n            feature.geometry.coordinates[0][0][1],\n            feature.geometry.coordinates[0][0][0]\n          );\n          instance = new google.maps.Rectangle(\n            Object.assign({}, this.polyOptions, {\n              id: feature.properties.id,\n              type: feature.properties.type,\n              // fillColor: feature.properties.color,\n              bounds: new google.maps.LatLngBounds(SW, NE),\n              editable: false,\n            })\n          );\n          break;\n        case google.maps.drawing.OverlayType.POLYGON:\n          instance = new google.maps.Polygon(\n            Object.assign({}, this.polyOptions, {\n              id: feature.properties.id,\n              type: feature.properties.type,\n              // fillColor: feature.properties.color,\n              paths: this.transformToMVCArray(feature.geometry.coordinates),\n              editable: false,\n            })\n          );\n          break;\n        case google.maps.drawing.OverlayType.POLYLINE:\n          instance = new google.maps.Polyline({\n            id: feature.properties.id,\n            type: feature.properties.type,\n            // strokeColor: feature.properties.color,\n            path: this.transformToMVCArray([\n              feature.geometry.coordinates,\n            ]).getAt(0),\n            draggable: true,\n            editable: false,\n          });\n          break;\n        case google.maps.drawing.OverlayType.CIRCLE:\n          instance = new google.maps.Circle(\n            Object.assign({}, this.polyOptions, {\n              id: feature.properties.id,\n              type: feature.properties.type,\n              // fillColor: feature.properties.color,\n              center: new google.maps.LatLng(\n                feature.geometry.coordinates[1],\n                feature.geometry.coordinates[0]\n              ),\n              radius: feature.properties.radius,\n              editable: false,\n            })\n          );\n          break;\n      }\n      // instance.zIndex = this.overlays.length + 1;\n      return instance;\n    },\n\n    instanceFeature: function (overlay) {\n      var calculatedOverlay = this.calculateGeometry(overlay);\n      return this.dataLayer.add(\n        new google.maps.Data.Feature({\n          geometry: calculatedOverlay.geometry,\n          properties: Object.assign(\n            {\n              id: this.guid(),\n              type: overlay.type,\n            },\n            calculatedOverlay.hasOwnProperty(\"properties\")\n              ? calculatedOverlay.properties\n              : {}\n          ),\n        })\n      );\n    },\n\n    calculateGeometry: function (overlay, geometryOnly) {\n      switch (overlay.type) {\n        case google.maps.drawing.OverlayType.MARKER:\n          return geometryOnly\n            ? new google.maps.Data.Point(overlay.getPosition())\n            : {\n                geometry: new google.maps.Data.Point(overlay.getPosition()),\n              };\n        case google.maps.drawing.OverlayType.RECTANGLE:\n          let b = overlay.getBounds(),\n            p = [\n              b.getSouthWest(),\n              {\n                lat: b.getSouthWest().lat(),\n                lng: b.getNorthEast().lng(),\n              },\n              b.getNorthEast(),\n              {\n                lng: b.getSouthWest().lng(),\n                lat: b.getNorthEast().lat(),\n              },\n            ];\n          return geometryOnly\n            ? new google.maps.Data.Polygon([p])\n            : {\n                geometry: new google.maps.Data.Polygon([p]),\n              };\n        case google.maps.drawing.OverlayType.POLYGON:\n          return geometryOnly\n            ? new google.maps.Data.Polygon([overlay.getPath().getArray()])\n            : {\n                geometry: new google.maps.Data.Polygon([\n                  overlay.getPath().getArray(),\n                ]),\n              };\n        case google.maps.drawing.OverlayType.POLYLINE:\n          return geometryOnly\n            ? new google.maps.Data.LineString(overlay.getPath().getArray())\n            : {\n                geometry: new google.maps.Data.LineString(\n                  overlay.getPath().getArray()\n                ),\n              };\n        case google.maps.drawing.OverlayType.CIRCLE:\n          return geometryOnly\n            ? new google.maps.Data.Point(overlay.getCenter())\n            : {\n                properties: {\n                  radius: overlay.getRadius(),\n                },\n                geometry: new google.maps.Data.Point(overlay.getCenter()),\n              };\n      }\n    },\n\n    transformToMVCArray: function (a) {\n      let clone = new google.maps.MVCArray();\n\n      function transform($a, parent) {\n        if ($a.length == 2 && !Array.isArray($a[0]) && !Array.isArray($a[1]))\n          parent.push(new google.maps.LatLng($a[1], $a[0]));\n        for (let a = 0; a < $a.length; a++) {\n          if (!Array.isArray($a[a])) continue;\n          transform(\n            $a[a],\n            parent\n              ? $a[a].length == 2 &&\n                !Array.isArray($a[a][0]) &&\n                !Array.isArray($a[a][1])\n                ? parent\n                : parent.getAt(parent.push(new google.maps.MVCArray()) - 1)\n              : clone.getAt(clone.push(new google.maps.MVCArray()) - 1)\n          );\n        }\n      }\n\n      function isMVCArray(array) {\n        return array instanceof google.maps.MVCArray;\n      }\n\n      transform(a);\n\n      return clone;\n    },\n\n    loadFeaturesCollection: function (geoJSON) {\n      if (Array.isArray(geoJSON.features) && geoJSON.features.length > 0) {\n        let bounds = new google.maps.LatLngBounds();\n        for (let f = 0; f < geoJSON.features.length; f++) {\n          let overlay = this.instanceOverlay(geoJSON.features[f]);\n          overlay.feature = this.instanceFeature(overlay);\n          this.addOverlayEvents(overlay);\n          overlay.feature.getGeometry().forEachLatLng(function (latlng) {\n            bounds.extend(latlng);\n          });\n          // overlay.feature.setProperty(\"color\", features[f].properties.color);\n          overlay.setMap(this.map);\n          this.overlays.push(overlay);\n        }\n        this.map.fitBounds(bounds);\n      }\n    },\n\n    guid: function () {\n      function s4() {\n        return Math.floor((1 + Math.random()) * 0x10000)\n          .toString(16)\n          .substring(1);\n      }\n\n      return (\n        s4() +\n        s4() +\n        \"-\" +\n        s4() +\n        \"-\" +\n        s4() +\n        \"-\" +\n        s4() +\n        \"-\" +\n        s4() +\n        s4() +\n        s4()\n      );\n    },\n  };\n}\n"],
  "mappings": "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",
  "names": ["a"]
}
