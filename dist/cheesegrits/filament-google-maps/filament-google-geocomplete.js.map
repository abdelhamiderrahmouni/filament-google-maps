{
  "version": 3,
  "sources": ["../../../resources/js/filament-google-geocomplete.js"],
  "sourcesContent": ["export default function filamentGoogleGeocomplete({\n  setStateUsing,\n  debug = false,\n  statePath,\n  gmaps,\n  filterName,\n  reverseGeocodeFields,\n  latLngFields,\n  types,\n  countries,\n  isLocation,\n  placeField,\n  reverseGeocodeUsing,\n  hasReverseGeocodeUsing = false,\n  minChars,\n}) {\n  const geocompleteEl = isLocation ? statePath + \"-fgm-address\" : statePath;\n  const geoComplete = document.getElementById(geocompleteEl);\n\n  return {\n    geocoder: null,\n    mapEl: null,\n    symbols: {\n      \"%n\": [\"street_number\"],\n      \"%z\": [\"postal_code\"],\n      \"%S\": [\"street_address\", \"route\"],\n      \"%A1\": [\"administrative_area_level_1\"],\n      \"%A2\": [\"administrative_area_level_2\"],\n      \"%A3\": [\"administrative_area_level_3\"],\n      \"%A4\": [\"administrative_area_level_4\"],\n      \"%A5\": [\"administrative_area_level_5\"],\n      \"%a1\": [\"administrative_area_level_1\"],\n      \"%a2\": [\"administrative_area_level_2\"],\n      \"%a3\": [\"administrative_area_level_3\"],\n      \"%a4\": [\"administrative_area_level_4\"],\n      \"%a5\": [\"administrative_area_level_5\"],\n      \"%L\": [\"locality\", \"postal_town\"],\n      \"%D\": [\"sublocality\"],\n      \"%C\": [\"country\"],\n      \"%c\": [\"country\"],\n      \"%p\": [\"premise\"],\n      \"%P\": [\"premise\"],\n    },\n\n    loadGMaps: function () {\n      if (!document.getElementById(\"filament-google-maps-google-maps-js\")) {\n        const script = document.createElement(\"script\");\n        script.id = \"filament-google-maps-google-maps-js\";\n        window.filamentGoogleMapsAsyncLoad = this.createAutocomplete.bind(this);\n        script.src = gmaps + \"&callback=filamentGoogleMapsAsyncLoad\";\n        document.head.appendChild(script);\n      } else {\n        const waitForGlobal = function (key, callback) {\n          if (window[key]) {\n            callback();\n          } else {\n            setTimeout(function () {\n              waitForGlobal(key, callback);\n            }, 100);\n          }\n        };\n\n        waitForGlobal(\n          \"filamentGoogleMapsAPILoaded\",\n          function () {\n            this.createAutocomplete();\n          }.bind(this)\n        );\n      }\n    },\n\n    init: function (mapEl) {\n      if (debug) console.log(\"geocomplete init\");\n      this.mapEl = mapEl;\n\n      let typingTimer;\n      const doneTypingInterval = 300; // milliseconds\n\n      geoComplete.addEventListener('input', () => {\n        clearTimeout(typingTimer);\n\n        if (geoComplete.value.length >= minChars) {\n          typingTimer = setTimeout(() => {\n            if (debug) console.log('minChars met, loading GMaps');\n            this.loadGMaps();\n          }, doneTypingInterval);\n        } else {\n          if (debug) console.log('minChars not met');\n        }\n      });\n      },\n\n    createAutocomplete: function () {\n      window.filamentGoogleMapsAPILoaded = true;\n\n      let fields = [\n        \"address_components\",\n        \"formatted_address\",\n        \"geometry\",\n        \"name\",\n      ];\n\n      if (!fields.includes(placeField)) {\n        fields.push(placeField);\n      }\n\n      const geocompleteOptions = {\n        fields: fields,\n        strictBounds: false,\n        types: types,\n      };\n\n      if (geoComplete) {\n        window.addEventListener(\n          \"keydown\",\n          function (e) {\n            if (e.key === \"U+000A\" || e.key === \"Enter\" || e.code === \"Enter\") {\n              if (e.target.nodeName === \"INPUT\" && e.target.type === \"text\") {\n                e.preventDefault();\n                return false;\n              }\n            }\n          },\n          true\n        );\n\n        const autocomplete = new google.maps.places.Autocomplete(\n          geoComplete,\n          geocompleteOptions\n        );\n\n        autocomplete.setComponentRestrictions({\n          country: countries,\n        });\n\n        autocomplete.addListener(\"place_changed\", () => {\n          const place = autocomplete.getPlace();\n\n          if (!place.geometry || !place.geometry.location) {\n            window.alert(\n              \"No details available for input: '\" + place.name + \"'\"\n            );\n            return;\n          }\n\n          this.setLocation(place);\n          this.updateReverseGeocode(place);\n          this.updateLatLng(place);\n        });\n\n        const geoLocate = document.getElementById(statePath + \"-geolocate\");\n\n        if (geoLocate) {\n          this.geocoder = new google.maps.Geocoder();\n\n          geoLocate.addEventListener(\"click\", (event) => {\n            if (\"geolocation\" in navigator) {\n              navigator.geolocation.getCurrentPosition((position) => {\n                var currentLatitude = position.coords.latitude;\n                var currentLongitude = position.coords.longitude;\n                var currentLocation = {\n                  lat: currentLatitude,\n                  lng: currentLongitude,\n                };\n\n                this.geocoder\n                  .geocode({ location: currentLocation })\n                  .then((response) => {\n                    if (response.results[0]) {\n                      geoComplete.setAttribute(\n                        \"value\",\n                        response.results[0].formatted_address\n                      );\n                      this.setLocation(response.results[0]);\n                      this.updateReverseGeocode(response.results[0]);\n                      this.updateLatLng(response.results[0]);\n                    }\n                  });\n              });\n            }\n          });\n        }\n      }\n    },\n    setLocation: async function (place) {\n      if (isLocation) {\n        await setStateUsing(statePath, {\n          lat: place.geometry.location.lat(),\n          lng: place.geometry.location.lng(),\n          formatted_address: place[placeField],\n        });\n      } else {\n        await setStateUsing(statePath, place[placeField]);\n      }\n\n      if (filterName) {\n        const latPath = filterName + \".latitude\";\n        const lngPath = filterName + \".longitude\";\n        const lat = document.getElementById(latPath);\n        const lng = document.getElementById(lngPath);\n\n        if (lat && lng) {\n          lat.setAttribute(\"value\", place.geometry.location.lat().toString());\n          lng.setAttribute(\"value\", place.geometry.location.lng().toString());\n          await setStateUsing(\n            latPath,\n            place.geometry.location.lat().toString()\n          );\n          await setStateUsing(\n            lngPath,\n            place.geometry.location.lng().toString()\n          );\n        }\n      }\n    },\n    updateReverseGeocode: async function (place) {\n      if (this.hasReverseGeocode()) {\n        if (place.address_components) {\n          //await setStateUsing(config.autocomplete, response.results[0].formatted_address);\n          const replacements = this.getReplacements(place.address_components);\n\n          for (const field in reverseGeocodeFields) {\n            let replaced = reverseGeocodeFields[field];\n\n            for (const replacement in replacements) {\n              replaced = replaced\n                .split(replacement)\n                .join(replacements[replacement]);\n            }\n\n            for (const symbol in this.symbols) {\n              replaced = replaced.split(symbol).join(\"\");\n            }\n\n            replaced = replaced.trim();\n            await setStateUsing(field, replaced);\n          }\n        }\n\n        if (hasReverseGeocodeUsing) {\n          reverseGeocodeUsing(place);\n        }\n      }\n    },\n    updateLatLng: async function (place) {\n      if (Object.keys(latLngFields).length > 0) {\n        if (place.geometry) {\n          await setStateUsing(\n            latLngFields.lat,\n            place.geometry.location.lat().toString()\n          );\n          await setStateUsing(\n            latLngFields.lng,\n            place.geometry.location.lng().toString()\n          );\n        }\n      }\n    },\n    getReplacements: function (address_components) {\n      let replacements = {};\n\n      address_components.forEach((component) => {\n        for (const symbol in this.symbols) {\n          if (this.symbols[symbol].indexOf(component.types[0]) !== -1) {\n            if (symbol === symbol.toLowerCase()) {\n              replacements[symbol] = component.short_name;\n            } else {\n              replacements[symbol] = component.long_name;\n            }\n          }\n        }\n      });\n\n      if (debug) console.log(replacements);\n\n      return replacements;\n    },\n    hasReverseGeocode: function () {\n      return (\n        Object.keys(reverseGeocodeFields).length > 0 || hasReverseGeocodeUsing\n      );\n    },\n  };\n}\n"],
  "mappings": "AAAe,SAAR,0BAA2C,CAChD,cACA,MAAQ,GACR,UACA,MACA,WACA,qBACA,aACA,MACA,UACA,WACA,WACA,oBACA,uBAAyB,GACzB,QACF,EAAG,CACD,IAAM,cAAgB,WAAa,UAAY,eAAiB,UAC1D,YAAc,SAAS,eAAe,aAAa,EAEzD,MAAO,CACL,SAAU,KACV,MAAO,KACP,QAAS,CACP,KAAM,CAAC,eAAe,EACtB,KAAM,CAAC,aAAa,EACpB,KAAM,CAAC,iBAAkB,OAAO,EAChC,MAAO,CAAC,6BAA6B,EACrC,MAAO,CAAC,6BAA6B,EACrC,MAAO,CAAC,6BAA6B,EACrC,MAAO,CAAC,6BAA6B,EACrC,MAAO,CAAC,6BAA6B,EACrC,MAAO,CAAC,6BAA6B,EACrC,MAAO,CAAC,6BAA6B,EACrC,MAAO,CAAC,6BAA6B,EACrC,MAAO,CAAC,6BAA6B,EACrC,MAAO,CAAC,6BAA6B,EACrC,KAAM,CAAC,WAAY,aAAa,EAChC,KAAM,CAAC,aAAa,EACpB,KAAM,CAAC,SAAS,EAChB,KAAM,CAAC,SAAS,EAChB,KAAM,CAAC,SAAS,EAChB,KAAM,CAAC,SAAS,CAClB,EAEA,UAAW,UAAY,CACrB,GAAK,SAAS,eAAe,qCAAqC,EAM3D,CACL,IAAM,cAAgB,SAAU,IAAK,SAAU,CACzC,OAAO,GAAG,EACZ,SAAS,EAET,WAAW,UAAY,CACrB,cAAc,IAAK,QAAQ,CAC7B,EAAG,GAAG,CAEV,EAEA,cACE,8BACA,UAAY,CACV,KAAK,mBAAmB,CAC1B,EAAE,KAAK,IAAI,CACb,CACF,KAvBqE,CACnE,IAAM,OAAS,SAAS,cAAc,QAAQ,EAC9C,OAAO,GAAK,sCACZ,OAAO,4BAA8B,KAAK,mBAAmB,KAAK,IAAI,EACtE,OAAO,IAAM,MAAQ,wCACrB,SAAS,KAAK,YAAY,MAAM,CAClC,CAkBF,EAEA,KAAM,SAAU,MAAO,CACjB,OAAO,QAAQ,IAAI,kBAAkB,EACzC,KAAK,MAAQ,MAEb,IAAI,YACE,mBAAqB,IAE3B,YAAY,iBAAiB,QAAS,IAAM,CAC1C,aAAa,WAAW,EAEpB,YAAY,MAAM,QAAU,SAC9B,YAAc,WAAW,IAAM,CACzB,OAAO,QAAQ,IAAI,6BAA6B,EACpD,KAAK,UAAU,CACjB,EAAG,kBAAkB,EAEjB,OAAO,QAAQ,IAAI,kBAAkB,CAE7C,CAAC,CACD,EAEF,mBAAoB,UAAY,CAC9B,OAAO,4BAA8B,GAErC,IAAI,OAAS,CACX,qBACA,oBACA,WACA,MACF,EAEK,OAAO,SAAS,UAAU,GAC7B,OAAO,KAAK,UAAU,EAGxB,IAAM,mBAAqB,CACzB,OACA,aAAc,GACd,KACF,EAEA,GAAI,YAAa,CACf,OAAO,iBACL,UACA,SAAU,EAAG,CACX,IAAI,EAAE,MAAQ,UAAY,EAAE,MAAQ,SAAW,EAAE,OAAS,UACpD,EAAE,OAAO,WAAa,SAAW,EAAE,OAAO,OAAS,OACrD,SAAE,eAAe,EACV,EAGb,EACA,EACF,EAEA,IAAM,aAAe,IAAI,OAAO,KAAK,OAAO,aAC1C,YACA,kBACF,EAEA,aAAa,yBAAyB,CACpC,QAAS,SACX,CAAC,EAED,aAAa,YAAY,gBAAiB,IAAM,CAC9C,IAAM,MAAQ,aAAa,SAAS,EAEpC,GAAI,CAAC,MAAM,UAAY,CAAC,MAAM,SAAS,SAAU,CAC/C,OAAO,MACL,oCAAsC,MAAM,KAAO,GACrD,EACA,MACF,CAEA,KAAK,YAAY,KAAK,EACtB,KAAK,qBAAqB,KAAK,EAC/B,KAAK,aAAa,KAAK,CACzB,CAAC,EAED,IAAM,UAAY,SAAS,eAAe,UAAY,YAAY,EAE9D,YACF,KAAK,SAAW,IAAI,OAAO,KAAK,SAEhC,UAAU,iBAAiB,QAAU,OAAU,CACzC,gBAAiB,WACnB,UAAU,YAAY,mBAAoB,UAAa,CACrD,IAAI,gBAAkB,SAAS,OAAO,SAClC,iBAAmB,SAAS,OAAO,UACnC,gBAAkB,CACpB,IAAK,gBACL,IAAK,gBACP,EAEA,KAAK,SACF,QAAQ,CAAE,SAAU,eAAgB,CAAC,EACrC,KAAM,UAAa,CACd,SAAS,QAAQ,CAAC,IACpB,YAAY,aACV,QACA,SAAS,QAAQ,CAAC,EAAE,iBACtB,EACA,KAAK,YAAY,SAAS,QAAQ,CAAC,CAAC,EACpC,KAAK,qBAAqB,SAAS,QAAQ,CAAC,CAAC,EAC7C,KAAK,aAAa,SAAS,QAAQ,CAAC,CAAC,EAEzC,CAAC,CACL,CAAC,CAEL,CAAC,EAEL,CACF,EACA,YAAa,eAAgB,MAAO,CAWlC,GAVI,WACF,MAAM,cAAc,UAAW,CAC7B,IAAK,MAAM,SAAS,SAAS,IAAI,EACjC,IAAK,MAAM,SAAS,SAAS,IAAI,EACjC,kBAAmB,MAAM,UAAU,CACrC,CAAC,EAED,MAAM,cAAc,UAAW,MAAM,UAAU,CAAC,EAG9C,WAAY,CACd,IAAM,QAAU,WAAa,YACvB,QAAU,WAAa,aACvB,IAAM,SAAS,eAAe,OAAO,EACrC,IAAM,SAAS,eAAe,OAAO,EAEvC,KAAO,MACT,IAAI,aAAa,QAAS,MAAM,SAAS,SAAS,IAAI,EAAE,SAAS,CAAC,EAClE,IAAI,aAAa,QAAS,MAAM,SAAS,SAAS,IAAI,EAAE,SAAS,CAAC,EAClE,MAAM,cACJ,QACA,MAAM,SAAS,SAAS,IAAI,EAAE,SAAS,CACzC,EACA,MAAM,cACJ,QACA,MAAM,SAAS,SAAS,IAAI,EAAE,SAAS,CACzC,EAEJ,CACF,EACA,qBAAsB,eAAgB,MAAO,CAC3C,GAAI,KAAK,kBAAkB,EAAG,CAC5B,GAAI,MAAM,mBAAoB,CAE5B,IAAM,aAAe,KAAK,gBAAgB,MAAM,kBAAkB,EAElE,QAAW,SAAS,qBAAsB,CACxC,IAAI,SAAW,qBAAqB,KAAK,EAEzC,QAAW,eAAe,aACxB,SAAW,SACR,MAAM,WAAW,EACjB,KAAK,aAAa,WAAW,CAAC,EAGnC,QAAW,UAAU,KAAK,QACxB,SAAW,SAAS,MAAM,MAAM,EAAE,KAAK,EAAE,EAG3C,SAAW,SAAS,KAAK,EACzB,MAAM,cAAc,MAAO,QAAQ,CACrC,CACF,CAEI,wBACF,oBAAoB,KAAK,CAE7B,CACF,EACA,aAAc,eAAgB,MAAO,CAC/B,OAAO,KAAK,YAAY,EAAE,OAAS,GACjC,MAAM,WACR,MAAM,cACJ,aAAa,IACb,MAAM,SAAS,SAAS,IAAI,EAAE,SAAS,CACzC,EACA,MAAM,cACJ,aAAa,IACb,MAAM,SAAS,SAAS,IAAI,EAAE,SAAS,CACzC,EAGN,EACA,gBAAiB,SAAU,mBAAoB,CAC7C,IAAI,aAAe,CAAC,EAEpB,0BAAmB,QAAS,WAAc,CACxC,QAAW,UAAU,KAAK,QACpB,KAAK,QAAQ,MAAM,EAAE,QAAQ,UAAU,MAAM,CAAC,CAAC,IAAM,KACnD,SAAW,OAAO,YAAY,EAChC,aAAa,MAAM,EAAI,UAAU,WAEjC,aAAa,MAAM,EAAI,UAAU,UAIzC,CAAC,EAEG,OAAO,QAAQ,IAAI,YAAY,EAE5B,YACT,EACA,kBAAmB,UAAY,CAC7B,OACE,OAAO,KAAK,oBAAoB,EAAE,OAAS,GAAK,sBAEpD,CACF,CACF",
  "names": []
}
