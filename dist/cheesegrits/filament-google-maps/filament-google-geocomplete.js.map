{
  "version": 3,
  "sources": ["../../../resources/js/filament-google-geocomplete.js"],
  "sourcesContent": ["export default function filamentGoogleGeocomplete({\r\n    setStateUsing,\r\n    debug = false,\r\n    statePath,\r\n    gmaps,\r\n    filterName,\r\n    reverseGeocodeFields,\r\n    latLngFields,\r\n    types,\r\n    countries,\r\n    isLocation,\r\n    placeField,\r\n    reverseGeocodeUsing,\r\n    hasReverseGeocodeUsing = false,\r\n    minChars,\r\n}) {\r\n    const geocompleteEl = isLocation ? statePath + \"-fgm-address\" : statePath;\r\n    const geoComplete = document.getElementById(geocompleteEl);\r\n\r\n    return {\r\n        geocoder: null,\r\n        mapEl: null,\r\n        symbols: {\r\n            \"%n\": [\"street_number\"],\r\n            \"%z\": [\"postal_code\"],\r\n            \"%S\": [\"street_address\", \"route\"],\r\n            \"%A1\": [\"administrative_area_level_1\"],\r\n            \"%A2\": [\"administrative_area_level_2\"],\r\n            \"%A3\": [\"administrative_area_level_3\"],\r\n            \"%A4\": [\"administrative_area_level_4\"],\r\n            \"%A5\": [\"administrative_area_level_5\"],\r\n            \"%a1\": [\"administrative_area_level_1\"],\r\n            \"%a2\": [\"administrative_area_level_2\"],\r\n            \"%a3\": [\"administrative_area_level_3\"],\r\n            \"%a4\": [\"administrative_area_level_4\"],\r\n            \"%a5\": [\"administrative_area_level_5\"],\r\n            \"%L\": [\"locality\", \"postal_town\"],\r\n            \"%D\": [\"sublocality\"],\r\n            \"%C\": [\"country\"],\r\n            \"%c\": [\"country\"],\r\n            \"%p\": [\"premise\"],\r\n            \"%P\": [\"premise\"],\r\n        },\r\n\r\n        loadGMaps: function () {\r\n            if (\r\n                !document.getElementById(\"filament-google-maps-google-maps-js\")\r\n            ) {\r\n                const script = document.createElement(\"script\");\r\n                script.id = \"filament-google-maps-google-maps-js\";\r\n                window.filamentGoogleMapsAsyncLoad =\r\n                    this.createAutocomplete.bind(this);\r\n                script.src = gmaps + \"&callback=filamentGoogleMapsAsyncLoad\";\r\n                document.head.appendChild(script);\r\n            } else {\r\n                const waitForGlobal = function (key, callback) {\r\n                    if (window[key]) {\r\n                        callback();\r\n                    } else {\r\n                        setTimeout(function () {\r\n                            waitForGlobal(key, callback);\r\n                        }, 100);\r\n                    }\r\n                };\r\n\r\n                waitForGlobal(\r\n                    \"filamentGoogleMapsAPILoaded\",\r\n                    function () {\r\n                        this.createAutocomplete();\r\n                    }.bind(this)\r\n                );\r\n            }\r\n        },\r\n\r\n        init: function (mapEl) {\r\n            if (debug) console.log(\"geocomplete init\");\r\n            this.mapEl = mapEl;\r\n\r\n            let typingTimer;\r\n            const doneTypingInterval = 300; // milliseconds\r\n\r\n            geoComplete.addEventListener(\"input\", () => {\r\n                clearTimeout(typingTimer);\r\n\r\n                if (geoComplete.value.length >= minChars) {\r\n                    typingTimer = setTimeout(() => {\r\n                        if (debug) console.log(\"minChars met, loading GMaps\");\r\n                        this.loadGMaps();\r\n                    }, doneTypingInterval);\r\n                } else {\r\n                    if (debug) console.log(\"minChars not met\");\r\n                }\r\n            });\r\n        },\r\n\r\n        createAutocomplete: function () {\r\n            window.filamentGoogleMapsAPILoaded = true;\r\n\r\n            let fields = [\r\n                \"address_components\",\r\n                \"formatted_address\",\r\n                \"geometry\",\r\n                \"name\",\r\n            ];\r\n\r\n            if (!fields.includes(placeField)) {\r\n                fields.push(placeField);\r\n            }\r\n\r\n            const geocompleteOptions = {\r\n                fields: fields,\r\n                strictBounds: false,\r\n                types: types,\r\n            };\r\n\r\n            if (geoComplete) {\r\n                window.addEventListener(\r\n                    \"keydown\",\r\n                    function (e) {\r\n                        if (\r\n                            e.key === \"U+000A\" ||\r\n                            e.key === \"Enter\" ||\r\n                            e.code === \"Enter\"\r\n                        ) {\r\n                            if (\r\n                                e.target.nodeName === \"INPUT\" &&\r\n                                e.target.type === \"text\"\r\n                            ) {\r\n                                e.preventDefault();\r\n                                return false;\r\n                            }\r\n                        }\r\n                    },\r\n                    true\r\n                );\r\n\r\n                const autocomplete = new google.maps.places.Autocomplete(\r\n                    geoComplete,\r\n                    geocompleteOptions\r\n                );\r\n\r\n                autocomplete.setComponentRestrictions({\r\n                    country: countries,\r\n                });\r\n\r\n                autocomplete.addListener(\"place_changed\", () => {\r\n                    const place = autocomplete.getPlace();\r\n\r\n                    if (!place.geometry || !place.geometry.location) {\r\n                        window.alert(\r\n                            \"No details available for input: '\" +\r\n                                place.name +\r\n                                \"'\"\r\n                        );\r\n                        return;\r\n                    }\r\n\r\n                    this.setLocation(place);\r\n                    this.updateReverseGeocode(place);\r\n                    this.updateLatLng(place);\r\n                });\r\n\r\n                const geoLocate = document.getElementById(\r\n                    statePath + \"-geolocate\"\r\n                );\r\n\r\n                if (geoLocate) {\r\n                    this.geocoder = new google.maps.Geocoder();\r\n\r\n                    geoLocate.addEventListener(\"click\", (event) => {\r\n                        if (\"geolocation\" in navigator) {\r\n                            navigator.geolocation.getCurrentPosition(\r\n                                (position) => {\r\n                                    var currentLatitude =\r\n                                        position.coords.latitude;\r\n                                    var currentLongitude =\r\n                                        position.coords.longitude;\r\n                                    var currentLocation = {\r\n                                        lat: currentLatitude,\r\n                                        lng: currentLongitude,\r\n                                    };\r\n\r\n                                    this.geocoder\r\n                                        .geocode({ location: currentLocation })\r\n                                        .then((response) => {\r\n                                            if (response.results[0]) {\r\n                                                geoComplete.setAttribute(\r\n                                                    \"value\",\r\n                                                    response.results[0]\r\n                                                        .formatted_address\r\n                                                );\r\n                                                this.setLocation(\r\n                                                    response.results[0]\r\n                                                );\r\n                                                this.updateReverseGeocode(\r\n                                                    response.results[0]\r\n                                                );\r\n                                                this.updateLatLng(\r\n                                                    response.results[0]\r\n                                                );\r\n                                            }\r\n                                        });\r\n                                }\r\n                            );\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        },\r\n\r\n        setLocation: async function (place) {\r\n            if (isLocation) {\r\n                await setStateUsing(statePath, {\r\n                    lat: place.geometry.location.lat(),\r\n                    lng: place.geometry.location.lng(),\r\n                    formatted_address: place[placeField],\r\n                });\r\n            } else {\r\n                await setStateUsing(statePath, place[placeField]);\r\n            }\r\n\r\n            if (filterName) {\r\n                const latPath = filterName + \".latitude\";\r\n                const lngPath = filterName + \".longitude\";\r\n                const lat = document.getElementById(latPath);\r\n                const lng = document.getElementById(lngPath);\r\n\r\n                if (lat && lng) {\r\n                    lat.setAttribute(\r\n                        \"value\",\r\n                        place.geometry.location.lat().toString()\r\n                    );\r\n                    lng.setAttribute(\r\n                        \"value\",\r\n                        place.geometry.location.lng().toString()\r\n                    );\r\n                    await setStateUsing(\r\n                        latPath,\r\n                        place.geometry.location.lat().toString()\r\n                    );\r\n                    await setStateUsing(\r\n                        lngPath,\r\n                        place.geometry.location.lng().toString()\r\n                    );\r\n                }\r\n            }\r\n        },\r\n\r\n        updateReverseGeocode: async function (place) {\r\n            if (this.hasReverseGeocode()) {\r\n                if (place.address_components) {\r\n                    //await setStateUsing(config.autocomplete, response.results[0].formatted_address);\r\n                    const replacements = this.getReplacements(\r\n                        place.address_components\r\n                    );\r\n\r\n                    for (const field in reverseGeocodeFields) {\r\n                        let replaced = reverseGeocodeFields[field];\r\n\r\n                        for (const replacement in replacements) {\r\n                            replaced = replaced\r\n                                .split(replacement)\r\n                                .join(replacements[replacement]);\r\n                        }\r\n\r\n                        for (const symbol in this.symbols) {\r\n                            replaced = replaced.split(symbol).join(\"\");\r\n                        }\r\n\r\n                        replaced = replaced.trim();\r\n                        await setStateUsing(field, replaced);\r\n                    }\r\n                }\r\n\r\n                if (hasReverseGeocodeUsing) {\r\n                    reverseGeocodeUsing(place);\r\n                }\r\n            }\r\n        },\r\n\r\n        updateLatLng: async function (place) {\r\n            if (Object.keys(latLngFields).length > 0) {\r\n                if (place.geometry) {\r\n                    await setStateUsing(\r\n                        latLngFields.lat,\r\n                        place.geometry.location.lat().toString()\r\n                    );\r\n                    await setStateUsing(\r\n                        latLngFields.lng,\r\n                        place.geometry.location.lng().toString()\r\n                    );\r\n                }\r\n            }\r\n        },\r\n\r\n        getReplacements: function (address_components) {\r\n            let replacements = {};\r\n\r\n            address_components.forEach((component) => {\r\n                for (const symbol in this.symbols) {\r\n                    if (\r\n                        this.symbols[symbol].indexOf(component.types[0]) !== -1\r\n                    ) {\r\n                        if (symbol === symbol.toLowerCase()) {\r\n                            replacements[symbol] = component.short_name;\r\n                        } else {\r\n                            replacements[symbol] = component.long_name;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (debug) console.log(replacements);\r\n\r\n            return replacements;\r\n        },\r\n\r\n        hasReverseGeocode: function () {\r\n            return (\r\n                Object.keys(reverseGeocodeFields).length > 0 ||\r\n                hasReverseGeocodeUsing\r\n            );\r\n        },\r\n    };\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
